// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/reversi.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class ReversiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ReversiBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ReversiBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// 取得可以下的位置
  ffi.Pointer<PairArray> getMovableArray(
    int player,
    ffi.Pointer<IntArray> chessTable,
  ) {
    return _getMovableArray(
      player,
      chessTable,
    );
  }

  late final _getMovableArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PairArray> Function(
              ffi.Int, ffi.Pointer<IntArray>)>>('getMovableArray');
  late final _getMovableArray = _getMovableArrayPtr.asFunction<
      ffi.Pointer<PairArray> Function(int, ffi.Pointer<IntArray>)>();

  /// 釋放記憶體
  void freePairArray(
    ffi.Pointer<PairArray> pairArray,
  ) {
    return _freePairArray(
      pairArray,
    );
  }

  late final _freePairArrayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PairArray>)>>(
          'freePairArray');
  late final _freePairArray =
      _freePairArrayPtr.asFunction<void Function(ffi.Pointer<PairArray>)>();
}

final class IntArray extends ffi.Struct {
  external ffi.Pointer<ffi.Int> array;

  @ffi.Int()
  external int size;
}

final class PairStruct extends ffi.Struct {
  @ffi.Int()
  external int first;

  @ffi.Int()
  external int second;
}

final class PairArray extends ffi.Struct {
  external ffi.Pointer<PairStruct> array;

  @ffi.Int()
  external int size;
}

enum Player {
  None(0),
  Black(1),
  White(2);

  final int value;
  const Player(this.value);

  static Player fromValue(int value) => switch (value) {
        0 => None,
        1 => Black,
        2 => White,
        _ => throw ArgumentError("Unknown value for Player: $value"),
      };
}
